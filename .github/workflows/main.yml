name: merge scheduled pull requests

on:
  schedule:
    - cron: "*/5 * * * *" # 5 minutes interval

env:
  APP_ID: ${{ secrets.APP_ID }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

jobs:
  merge_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find scheduled Pull requests
        run: |
          #!/usr/local/bin/node

          const Octokit = require("@octokit/rest")

          const octokit = new Octokit({
            auth: `app/${process.env.APP_ID}`,
            privateKey: process.env.PRIVATE_KEY
          })

          async function mergePR(REPO, pull_number) {
            try {
              await octokit.pulls.merge({
                owner: REPO.owner,
                repo: REPO.repo,
                pull_number: pull_number
              })
            } catch(error) {
              console.error(error)
            }
          }

          const SCHEDULED_PULL_REQUESTS = []
          const DATE = new Date()
          const CURRENT_DATE = DATE.toISOString().split("T")[0];
          const REPO = context.repo()

          const pullRequests = await octokit.pulls.list({
            owner: REPO.owner,
            repo: REPO.repo
          })

          for (const PR of pullRequests.data) {
            const labels = PR.labels.map(label => label.name)

            if (labels.includes("scheduled for merge")) {
              const schedule = labels.find(label => label.startsWith("schedule:"))
              const scheduledDate = schedule.split(":")[1]

              if (scheduledDate === CURRENT_DATE) {
                SCHEDULED_PULL_REQUESTS.push({
                  repo: REPO,
                  pull_number: PR.number
                })
              }
            }
          }

          for (const PR of SCHEDULED_PULL_REQUESTS) {
            await mergePR({
              owner: REPO.owner, 
              repo: REPO.repo
            }, PR.pull_number)
          }
